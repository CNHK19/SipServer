//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18010
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ControlPanel.TurnService1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WcfTurnConfiguration", Namespace="http://officesip.com/turn.server.control")]
    [System.SerializableAttribute()]
    public partial class WcfTurnConfiguration : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AdminNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AdminPassField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] Key1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] Key2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaxPortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MinPortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Net.IPAddress PublicIpField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RealmField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TurnTcpPortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TurnTlsPortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TurnUdpPortField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AdminName {
            get {
                return this.AdminNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AdminNameField, value) != true)) {
                    this.AdminNameField = value;
                    this.RaisePropertyChanged("AdminName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AdminPass {
            get {
                return this.AdminPassField;
            }
            set {
                if ((object.ReferenceEquals(this.AdminPassField, value) != true)) {
                    this.AdminPassField = value;
                    this.RaisePropertyChanged("AdminPass");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Key1 {
            get {
                return this.Key1Field;
            }
            set {
                if ((object.ReferenceEquals(this.Key1Field, value) != true)) {
                    this.Key1Field = value;
                    this.RaisePropertyChanged("Key1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Key2 {
            get {
                return this.Key2Field;
            }
            set {
                if ((object.ReferenceEquals(this.Key2Field, value) != true)) {
                    this.Key2Field = value;
                    this.RaisePropertyChanged("Key2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxPort {
            get {
                return this.MaxPortField;
            }
            set {
                if ((this.MaxPortField.Equals(value) != true)) {
                    this.MaxPortField = value;
                    this.RaisePropertyChanged("MaxPort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MinPort {
            get {
                return this.MinPortField;
            }
            set {
                if ((this.MinPortField.Equals(value) != true)) {
                    this.MinPortField = value;
                    this.RaisePropertyChanged("MinPort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Net.IPAddress PublicIp {
            get {
                return this.PublicIpField;
            }
            set {
                if ((object.ReferenceEquals(this.PublicIpField, value) != true)) {
                    this.PublicIpField = value;
                    this.RaisePropertyChanged("PublicIp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Realm {
            get {
                return this.RealmField;
            }
            set {
                if ((object.ReferenceEquals(this.RealmField, value) != true)) {
                    this.RealmField = value;
                    this.RaisePropertyChanged("Realm");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TurnTcpPort {
            get {
                return this.TurnTcpPortField;
            }
            set {
                if ((this.TurnTcpPortField.Equals(value) != true)) {
                    this.TurnTcpPortField = value;
                    this.RaisePropertyChanged("TurnTcpPort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TurnTlsPort {
            get {
                return this.TurnTlsPortField;
            }
            set {
                if ((this.TurnTlsPortField.Equals(value) != true)) {
                    this.TurnTlsPortField = value;
                    this.RaisePropertyChanged("TurnTlsPort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TurnUdpPort {
            get {
                return this.TurnUdpPortField;
            }
            set {
                if ((this.TurnUdpPortField.Equals(value) != true)) {
                    this.TurnUdpPortField = value;
                    this.RaisePropertyChanged("TurnUdpPort");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://officesip.com/turn.server.control", ConfigurationName="TurnService1.IWcfTurnService")]
    public interface IWcfTurnService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://officesip.com/turn.server.control/IWcfTurnService/GetConfiguration", ReplyAction="http://officesip.com/turn.server.control/IWcfTurnService/GetConfigurationResponse" +
            "")]
        ControlPanel.TurnService1.WcfTurnConfiguration GetConfiguration();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://officesip.com/turn.server.control/IWcfTurnService/GetConfiguration", ReplyAction="http://officesip.com/turn.server.control/IWcfTurnService/GetConfigurationResponse" +
            "")]
        System.IAsyncResult BeginGetConfiguration(System.AsyncCallback callback, object asyncState);
        
        ControlPanel.TurnService1.WcfTurnConfiguration EndGetConfiguration(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://officesip.com/turn.server.control/IWcfTurnService/SetConfiguration", ReplyAction="http://officesip.com/turn.server.control/IWcfTurnService/SetConfigurationResponse" +
            "")]
        void SetConfiguration(ControlPanel.TurnService1.WcfTurnConfiguration configuration);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://officesip.com/turn.server.control/IWcfTurnService/SetConfiguration", ReplyAction="http://officesip.com/turn.server.control/IWcfTurnService/SetConfigurationResponse" +
            "")]
        System.IAsyncResult BeginSetConfiguration(ControlPanel.TurnService1.WcfTurnConfiguration configuration, System.AsyncCallback callback, object asyncState);
        
        void EndSetConfiguration(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWcfTurnServiceChannel : ControlPanel.TurnService1.IWcfTurnService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ControlPanel.TurnService1.WcfTurnConfiguration Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ControlPanel.TurnService1.WcfTurnConfiguration)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WcfTurnServiceClient : System.ServiceModel.ClientBase<ControlPanel.TurnService1.IWcfTurnService>, ControlPanel.TurnService1.IWcfTurnService {
        
        private BeginOperationDelegate onBeginGetConfigurationDelegate;
        
        private EndOperationDelegate onEndGetConfigurationDelegate;
        
        private System.Threading.SendOrPostCallback onGetConfigurationCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetConfigurationDelegate;
        
        private EndOperationDelegate onEndSetConfigurationDelegate;
        
        private System.Threading.SendOrPostCallback onSetConfigurationCompletedDelegate;
        
        public WcfTurnServiceClient() {
        }
        
        public WcfTurnServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WcfTurnServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WcfTurnServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WcfTurnServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetConfigurationCompletedEventArgs> GetConfigurationCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SetConfigurationCompleted;
        
        public ControlPanel.TurnService1.WcfTurnConfiguration GetConfiguration() {
            return base.Channel.GetConfiguration();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetConfiguration(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetConfiguration(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ControlPanel.TurnService1.WcfTurnConfiguration EndGetConfiguration(System.IAsyncResult result) {
            return base.Channel.EndGetConfiguration(result);
        }
        
        private System.IAsyncResult OnBeginGetConfiguration(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetConfiguration(callback, asyncState);
        }
        
        private object[] OnEndGetConfiguration(System.IAsyncResult result) {
            ControlPanel.TurnService1.WcfTurnConfiguration retVal = this.EndGetConfiguration(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetConfigurationCompleted(object state) {
            if ((this.GetConfigurationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetConfigurationCompleted(this, new GetConfigurationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetConfigurationAsync() {
            this.GetConfigurationAsync(null);
        }
        
        public void GetConfigurationAsync(object userState) {
            if ((this.onBeginGetConfigurationDelegate == null)) {
                this.onBeginGetConfigurationDelegate = new BeginOperationDelegate(this.OnBeginGetConfiguration);
            }
            if ((this.onEndGetConfigurationDelegate == null)) {
                this.onEndGetConfigurationDelegate = new EndOperationDelegate(this.OnEndGetConfiguration);
            }
            if ((this.onGetConfigurationCompletedDelegate == null)) {
                this.onGetConfigurationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetConfigurationCompleted);
            }
            base.InvokeAsync(this.onBeginGetConfigurationDelegate, null, this.onEndGetConfigurationDelegate, this.onGetConfigurationCompletedDelegate, userState);
        }
        
        public void SetConfiguration(ControlPanel.TurnService1.WcfTurnConfiguration configuration) {
            base.Channel.SetConfiguration(configuration);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSetConfiguration(ControlPanel.TurnService1.WcfTurnConfiguration configuration, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetConfiguration(configuration, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSetConfiguration(System.IAsyncResult result) {
            base.Channel.EndSetConfiguration(result);
        }
        
        private System.IAsyncResult OnBeginSetConfiguration(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ControlPanel.TurnService1.WcfTurnConfiguration configuration = ((ControlPanel.TurnService1.WcfTurnConfiguration)(inValues[0]));
            return this.BeginSetConfiguration(configuration, callback, asyncState);
        }
        
        private object[] OnEndSetConfiguration(System.IAsyncResult result) {
            this.EndSetConfiguration(result);
            return null;
        }
        
        private void OnSetConfigurationCompleted(object state) {
            if ((this.SetConfigurationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetConfigurationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetConfigurationAsync(ControlPanel.TurnService1.WcfTurnConfiguration configuration) {
            this.SetConfigurationAsync(configuration, null);
        }
        
        public void SetConfigurationAsync(ControlPanel.TurnService1.WcfTurnConfiguration configuration, object userState) {
            if ((this.onBeginSetConfigurationDelegate == null)) {
                this.onBeginSetConfigurationDelegate = new BeginOperationDelegate(this.OnBeginSetConfiguration);
            }
            if ((this.onEndSetConfigurationDelegate == null)) {
                this.onEndSetConfigurationDelegate = new EndOperationDelegate(this.OnEndSetConfiguration);
            }
            if ((this.onSetConfigurationCompletedDelegate == null)) {
                this.onSetConfigurationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetConfigurationCompleted);
            }
            base.InvokeAsync(this.onBeginSetConfigurationDelegate, new object[] {
                        configuration}, this.onEndSetConfigurationDelegate, this.onSetConfigurationCompletedDelegate, userState);
        }
    }
}
