//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18010
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ControlPanel.Service1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Configurations", Namespace="http://officesip.com/server.control")]
    [System.SerializableAttribute()]
    public partial class Configurations : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActiveDirectoryUsersGroupField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DomainNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveDirectoryUsersEnabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsAuthorizationEnabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsTracingEnabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TracingFileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ControlPanel.Service1.Users[] UsersField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ActiveDirectoryUsersGroup {
            get {
                return this.ActiveDirectoryUsersGroupField;
            }
            set {
                if ((object.ReferenceEquals(this.ActiveDirectoryUsersGroupField, value) != true)) {
                    this.ActiveDirectoryUsersGroupField = value;
                    this.RaisePropertyChanged("ActiveDirectoryUsersGroup");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DomainName {
            get {
                return this.DomainNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DomainNameField, value) != true)) {
                    this.DomainNameField = value;
                    this.RaisePropertyChanged("DomainName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActiveDirectoryUsersEnabled {
            get {
                return this.IsActiveDirectoryUsersEnabledField;
            }
            set {
                if ((this.IsActiveDirectoryUsersEnabledField.Equals(value) != true)) {
                    this.IsActiveDirectoryUsersEnabledField = value;
                    this.RaisePropertyChanged("IsActiveDirectoryUsersEnabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAuthorizationEnabled {
            get {
                return this.IsAuthorizationEnabledField;
            }
            set {
                if ((this.IsAuthorizationEnabledField.Equals(value) != true)) {
                    this.IsAuthorizationEnabledField = value;
                    this.RaisePropertyChanged("IsAuthorizationEnabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsTracingEnabled {
            get {
                return this.IsTracingEnabledField;
            }
            set {
                if ((this.IsTracingEnabledField.Equals(value) != true)) {
                    this.IsTracingEnabledField = value;
                    this.RaisePropertyChanged("IsTracingEnabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TracingFileName {
            get {
                return this.TracingFileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TracingFileNameField, value) != true)) {
                    this.TracingFileNameField = value;
                    this.RaisePropertyChanged("TracingFileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ControlPanel.Service1.Users[] Users {
            get {
                return this.UsersField;
            }
            set {
                if ((object.ReferenceEquals(this.UsersField, value) != true)) {
                    this.UsersField = value;
                    this.RaisePropertyChanged("Users");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Users", Namespace="http://officesip.com/server.control")]
    [System.SerializableAttribute()]
    public partial class Users : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsReadOnlyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SourceNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsReadOnly {
            get {
                return this.IsReadOnlyField;
            }
            set {
                if ((this.IsReadOnlyField.Equals(value) != true)) {
                    this.IsReadOnlyField = value;
                    this.RaisePropertyChanged("IsReadOnly");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceName {
            get {
                return this.SourceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SourceNameField, value) != true)) {
                    this.SourceNameField = value;
                    this.RaisePropertyChanged("SourceName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://officesip.com/server.control")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AvailabilityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DisplayNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Availability {
            get {
                return this.AvailabilityField;
            }
            set {
                if ((this.AvailabilityField.Equals(value) != true)) {
                    this.AvailabilityField = value;
                    this.RaisePropertyChanged("Availability");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayName {
            get {
                return this.DisplayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayNameField, value) != true)) {
                    this.DisplayNameField = value;
                    this.RaisePropertyChanged("DisplayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VoipProvider", Namespace="http://officesip.com/server.control")]
    [System.SerializableAttribute()]
    public partial class VoipProvider : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AuthenticationIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DisplayNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ForwardCallToField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HostnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Net.IPEndPoint LocalEndPointField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OutgoingProxyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TransportField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AuthenticationId {
            get {
                return this.AuthenticationIdField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthenticationIdField, value) != true)) {
                    this.AuthenticationIdField = value;
                    this.RaisePropertyChanged("AuthenticationId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayName {
            get {
                return this.DisplayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayNameField, value) != true)) {
                    this.DisplayNameField = value;
                    this.RaisePropertyChanged("DisplayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMessage {
            get {
                return this.ErrorMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMessageField, value) != true)) {
                    this.ErrorMessageField = value;
                    this.RaisePropertyChanged("ErrorMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ForwardCallTo {
            get {
                return this.ForwardCallToField;
            }
            set {
                if ((object.ReferenceEquals(this.ForwardCallToField, value) != true)) {
                    this.ForwardCallToField = value;
                    this.RaisePropertyChanged("ForwardCallTo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Hostname {
            get {
                return this.HostnameField;
            }
            set {
                if ((object.ReferenceEquals(this.HostnameField, value) != true)) {
                    this.HostnameField = value;
                    this.RaisePropertyChanged("Hostname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Net.IPEndPoint LocalEndPoint {
            get {
                return this.LocalEndPointField;
            }
            set {
                if ((object.ReferenceEquals(this.LocalEndPointField, value) != true)) {
                    this.LocalEndPointField = value;
                    this.RaisePropertyChanged("LocalEndPoint");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OutgoingProxy {
            get {
                return this.OutgoingProxyField;
            }
            set {
                if ((object.ReferenceEquals(this.OutgoingProxyField, value) != true)) {
                    this.OutgoingProxyField = value;
                    this.RaisePropertyChanged("OutgoingProxy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Transport {
            get {
                return this.TransportField;
            }
            set {
                if ((object.ReferenceEquals(this.TransportField, value) != true)) {
                    this.TransportField = value;
                    this.RaisePropertyChanged("Transport");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TURNConfigurations", Namespace="http://officesip.com/server.control")]
    [System.SerializableAttribute()]
    public partial class TURNConfigurations : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FQDNField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] Key1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] Key2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TCPPortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UDPPortField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FQDN {
            get {
                return this.FQDNField;
            }
            set {
                if ((object.ReferenceEquals(this.FQDNField, value) != true)) {
                    this.FQDNField = value;
                    this.RaisePropertyChanged("FQDN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Key1 {
            get {
                return this.Key1Field;
            }
            set {
                if ((object.ReferenceEquals(this.Key1Field, value) != true)) {
                    this.Key1Field = value;
                    this.RaisePropertyChanged("Key1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Key2 {
            get {
                return this.Key2Field;
            }
            set {
                if ((object.ReferenceEquals(this.Key2Field, value) != true)) {
                    this.Key2Field = value;
                    this.RaisePropertyChanged("Key2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TCPPort {
            get {
                return this.TCPPortField;
            }
            set {
                if ((this.TCPPortField.Equals(value) != true)) {
                    this.TCPPortField = value;
                    this.RaisePropertyChanged("TCPPort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UDPPort {
            get {
                return this.UDPPortField;
            }
            set {
                if ((this.UDPPortField.Equals(value) != true)) {
                    this.UDPPortField = value;
                    this.RaisePropertyChanged("UDPPort");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://officesip.com/server.control", ConfigurationName="Service1.IWcfService", CallbackContract=typeof(ControlPanel.Service1.IWcfServiceCallback))]
    public interface IWcfService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://officesip.com/server.control/IWcfService/GetConfigurations", ReplyAction="http://officesip.com/server.control/IWcfService/GetConfigurationsResponse")]
        ControlPanel.Service1.Configurations GetConfigurations();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://officesip.com/server.control/IWcfService/GetConfigurations", ReplyAction="http://officesip.com/server.control/IWcfService/GetConfigurationsResponse")]
        System.IAsyncResult BeginGetConfigurations(System.AsyncCallback callback, object asyncState);
        
        ControlPanel.Service1.Configurations EndGetConfigurations(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://officesip.com/server.control/IWcfService/SetConfigurations", ReplyAction="http://officesip.com/server.control/IWcfService/SetConfigurationsResponse")]
        void SetConfigurations(ControlPanel.Service1.Configurations configurations);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://officesip.com/server.control/IWcfService/SetConfigurations", ReplyAction="http://officesip.com/server.control/IWcfService/SetConfigurationsResponse")]
        System.IAsyncResult BeginSetConfigurations(ControlPanel.Service1.Configurations configurations, System.AsyncCallback callback, object asyncState);
        
        void EndSetConfigurations(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://officesip.com/server.control/IWcfService/GetUsersCount", ReplyAction="http://officesip.com/server.control/IWcfService/GetUsersCountResponse")]
        int GetUsersCount(string id);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://officesip.com/server.control/IWcfService/GetUsersCount", ReplyAction="http://officesip.com/server.control/IWcfService/GetUsersCountResponse")]
        System.IAsyncResult BeginGetUsersCount(string id, System.AsyncCallback callback, object asyncState);
        
        int EndGetUsersCount(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://officesip.com/server.control/IWcfService/GetUsers", ReplyAction="http://officesip.com/server.control/IWcfService/GetUsersResponse")]
        ControlPanel.Service1.User[] GetUsers(out int overallCount, string id, int startIndex, int count);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://officesip.com/server.control/IWcfService/GetUsers", ReplyAction="http://officesip.com/server.control/IWcfService/GetUsersResponse")]
        System.IAsyncResult BeginGetUsers(string id, int startIndex, int count, System.AsyncCallback callback, object asyncState);
        
        ControlPanel.Service1.User[] EndGetUsers(out int overallCount, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://officesip.com/server.control/IWcfService/AddUser", ReplyAction="http://officesip.com/server.control/IWcfService/AddUserResponse")]
        void AddUser(string usersId, ControlPanel.Service1.User user, string password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://officesip.com/server.control/IWcfService/AddUser", ReplyAction="http://officesip.com/server.control/IWcfService/AddUserResponse")]
        System.IAsyncResult BeginAddUser(string usersId, ControlPanel.Service1.User user, string password, System.AsyncCallback callback, object asyncState);
        
        void EndAddUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://officesip.com/server.control/IWcfService/UpdateUser", ReplyAction="http://officesip.com/server.control/IWcfService/UpdateUserResponse")]
        void UpdateUser(string usersId, ControlPanel.Service1.User user);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://officesip.com/server.control/IWcfService/UpdateUser", ReplyAction="http://officesip.com/server.control/IWcfService/UpdateUserResponse")]
        System.IAsyncResult BeginUpdateUser(string usersId, ControlPanel.Service1.User user, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://officesip.com/server.control/IWcfService/RemoveUser", ReplyAction="http://officesip.com/server.control/IWcfService/RemoveUserResponse")]
        void RemoveUser(string usersId, string name);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://officesip.com/server.control/IWcfService/RemoveUser", ReplyAction="http://officesip.com/server.control/IWcfService/RemoveUserResponse")]
        System.IAsyncResult BeginRemoveUser(string usersId, string name, System.AsyncCallback callback, object asyncState);
        
        void EndRemoveUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://officesip.com/server.control/IWcfService/SetUserPassword", ReplyAction="http://officesip.com/server.control/IWcfService/SetUserPasswordResponse")]
        void SetUserPassword(string usersId, string name, string password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://officesip.com/server.control/IWcfService/SetUserPassword", ReplyAction="http://officesip.com/server.control/IWcfService/SetUserPasswordResponse")]
        System.IAsyncResult BeginSetUserPassword(string usersId, string name, string password, System.AsyncCallback callback, object asyncState);
        
        void EndSetUserPassword(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://officesip.com/server.control/IWcfService/GetVoipProviders", ReplyAction="http://officesip.com/server.control/IWcfService/GetVoipProvidersResponse")]
        ControlPanel.Service1.VoipProvider[] GetVoipProviders();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://officesip.com/server.control/IWcfService/GetVoipProviders", ReplyAction="http://officesip.com/server.control/IWcfService/GetVoipProvidersResponse")]
        System.IAsyncResult BeginGetVoipProviders(System.AsyncCallback callback, object asyncState);
        
        ControlPanel.Service1.VoipProvider[] EndGetVoipProviders(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://officesip.com/server.control/IWcfService/AddVoipProvider", ReplyAction="http://officesip.com/server.control/IWcfService/AddVoipProviderResponse")]
        void AddVoipProvider(ControlPanel.Service1.VoipProvider provider);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://officesip.com/server.control/IWcfService/AddVoipProvider", ReplyAction="http://officesip.com/server.control/IWcfService/AddVoipProviderResponse")]
        System.IAsyncResult BeginAddVoipProvider(ControlPanel.Service1.VoipProvider provider, System.AsyncCallback callback, object asyncState);
        
        void EndAddVoipProvider(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://officesip.com/server.control/IWcfService/RemoveVoipProvider", ReplyAction="http://officesip.com/server.control/IWcfService/RemoveVoipProviderResponse")]
        void RemoveVoipProvider(string username, string hostname);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://officesip.com/server.control/IWcfService/RemoveVoipProvider", ReplyAction="http://officesip.com/server.control/IWcfService/RemoveVoipProviderResponse")]
        System.IAsyncResult BeginRemoveVoipProvider(string username, string hostname, System.AsyncCallback callback, object asyncState);
        
        void EndRemoveVoipProvider(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://officesip.com/server.control/IWcfService/Ping", ReplyAction="http://officesip.com/server.control/IWcfService/PingResponse")]
        void Ping();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://officesip.com/server.control/IWcfService/Ping", ReplyAction="http://officesip.com/server.control/IWcfService/PingResponse")]
        System.IAsyncResult BeginPing(System.AsyncCallback callback, object asyncState);
        
        void EndPing(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://officesip.com/server.control/IWcfService/GetVersion", ReplyAction="http://officesip.com/server.control/IWcfService/GetVersionResponse")]
        System.Version GetVersion();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://officesip.com/server.control/IWcfService/GetVersion", ReplyAction="http://officesip.com/server.control/IWcfService/GetVersionResponse")]
        System.IAsyncResult BeginGetVersion(System.AsyncCallback callback, object asyncState);
        
        System.Version EndGetVersion(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://officesip.com/server.control/IWcfService/GetDefaultXmlConfiguration", ReplyAction="http://officesip.com/server.control/IWcfService/GetDefaultXmlConfigurationRespons" +
            "e")]
        string GetDefaultXmlConfiguration();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://officesip.com/server.control/IWcfService/GetDefaultXmlConfiguration", ReplyAction="http://officesip.com/server.control/IWcfService/GetDefaultXmlConfigurationRespons" +
            "e")]
        System.IAsyncResult BeginGetDefaultXmlConfiguration(System.AsyncCallback callback, object asyncState);
        
        string EndGetDefaultXmlConfiguration(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://officesip.com/server.control/IWcfService/GetXmlConfiguration", ReplyAction="http://officesip.com/server.control/IWcfService/GetXmlConfigurationResponse")]
        string GetXmlConfiguration();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://officesip.com/server.control/IWcfService/GetXmlConfiguration", ReplyAction="http://officesip.com/server.control/IWcfService/GetXmlConfigurationResponse")]
        System.IAsyncResult BeginGetXmlConfiguration(System.AsyncCallback callback, object asyncState);
        
        string EndGetXmlConfiguration(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://officesip.com/server.control/IWcfService/SetXmlConfiguration", ReplyAction="http://officesip.com/server.control/IWcfService/SetXmlConfigurationResponse")]
        string[] SetXmlConfiguration(string xml);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://officesip.com/server.control/IWcfService/SetXmlConfiguration", ReplyAction="http://officesip.com/server.control/IWcfService/SetXmlConfigurationResponse")]
        System.IAsyncResult BeginSetXmlConfiguration(string xml, System.AsyncCallback callback, object asyncState);
        
        string[] EndSetXmlConfiguration(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://officesip.com/server.control/IWcfService/ValidateXmlConfiguration", ReplyAction="http://officesip.com/server.control/IWcfService/ValidateXmlConfigurationResponse")]
        string[] ValidateXmlConfiguration(string xml);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://officesip.com/server.control/IWcfService/ValidateXmlConfiguration", ReplyAction="http://officesip.com/server.control/IWcfService/ValidateXmlConfigurationResponse")]
        System.IAsyncResult BeginValidateXmlConfiguration(string xml, System.AsyncCallback callback, object asyncState);
        
        string[] EndValidateXmlConfiguration(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://officesip.com/server.control/IWcfService/GetTurnConfigurations", ReplyAction="http://officesip.com/server.control/IWcfService/GetTurnConfigurationsResponse")]
        ControlPanel.Service1.TURNConfigurations GetTurnConfigurations();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://officesip.com/server.control/IWcfService/GetTurnConfigurations", ReplyAction="http://officesip.com/server.control/IWcfService/GetTurnConfigurationsResponse")]
        System.IAsyncResult BeginGetTurnConfigurations(System.AsyncCallback callback, object asyncState);
        
        ControlPanel.Service1.TURNConfigurations EndGetTurnConfigurations(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://officesip.com/server.control/IWcfService/SetTurnConfigurations", ReplyAction="http://officesip.com/server.control/IWcfService/SetTurnConfigurationsResponse")]
        void SetTurnConfigurations(ControlPanel.Service1.TURNConfigurations configurations);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://officesip.com/server.control/IWcfService/SetTurnConfigurations", ReplyAction="http://officesip.com/server.control/IWcfService/SetTurnConfigurationsResponse")]
        System.IAsyncResult BeginSetTurnConfigurations(ControlPanel.Service1.TURNConfigurations configurations, System.AsyncCallback callback, object asyncState);
        
        void EndSetTurnConfigurations(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://officesip.com/server.control/IWcfService/SetAdministratorPassword", ReplyAction="http://officesip.com/server.control/IWcfService/SetAdministratorPasswordResponse")]
        void SetAdministratorPassword(string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://officesip.com/server.control/IWcfService/SetAdministratorPassword", ReplyAction="http://officesip.com/server.control/IWcfService/SetAdministratorPasswordResponse")]
        System.IAsyncResult BeginSetAdministratorPassword(string newPassword, System.AsyncCallback callback, object asyncState);
        
        void EndSetAdministratorPassword(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWcfServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://officesip.com/server.control/IWcfService/AvailabilityChanged")]
        void AvailabilityChanged(string name, int availability);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://officesip.com/server.control/IWcfService/AvailabilityChanged")]
        System.IAsyncResult BeginAvailabilityChanged(string name, int availability, System.AsyncCallback callback, object asyncState);
        
        void EndAvailabilityChanged(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://officesip.com/server.control/IWcfService/NewClient")]
        void NewClient();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://officesip.com/server.control/IWcfService/NewClient")]
        System.IAsyncResult BeginNewClient(System.AsyncCallback callback, object asyncState);
        
        void EndNewClient(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://officesip.com/server.control/IWcfService/UsersReset")]
        void UsersReset(string usersId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://officesip.com/server.control/IWcfService/UsersReset")]
        System.IAsyncResult BeginUsersReset(string usersId, System.AsyncCallback callback, object asyncState);
        
        void EndUsersReset(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://officesip.com/server.control/IWcfService/UserAddedOrUpdated")]
        void UserAddedOrUpdated(string usersId, ControlPanel.Service1.User user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://officesip.com/server.control/IWcfService/UserAddedOrUpdated")]
        System.IAsyncResult BeginUserAddedOrUpdated(string usersId, ControlPanel.Service1.User user, System.AsyncCallback callback, object asyncState);
        
        void EndUserAddedOrUpdated(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://officesip.com/server.control/IWcfService/UserRemoved")]
        void UserRemoved(string usersId, string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://officesip.com/server.control/IWcfService/UserRemoved")]
        System.IAsyncResult BeginUserRemoved(string usersId, string name, System.AsyncCallback callback, object asyncState);
        
        void EndUserRemoved(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://officesip.com/server.control/IWcfService/VoipProviderUpdated")]
        void VoipProviderUpdated(ControlPanel.Service1.VoipProvider info);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://officesip.com/server.control/IWcfService/VoipProviderUpdated")]
        System.IAsyncResult BeginVoipProviderUpdated(ControlPanel.Service1.VoipProvider info, System.AsyncCallback callback, object asyncState);
        
        void EndVoipProviderUpdated(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWcfServiceChannel : ControlPanel.Service1.IWcfService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetConfigurationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetConfigurationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ControlPanel.Service1.Configurations Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ControlPanel.Service1.Configurations)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUsersCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUsersCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int overallCount {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        public ControlPanel.Service1.User[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ControlPanel.Service1.User[])(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetVoipProvidersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetVoipProvidersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ControlPanel.Service1.VoipProvider[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ControlPanel.Service1.VoipProvider[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Version Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Version)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDefaultXmlConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDefaultXmlConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetXmlConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetXmlConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SetXmlConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SetXmlConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ValidateXmlConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ValidateXmlConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTurnConfigurationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTurnConfigurationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ControlPanel.Service1.TURNConfigurations Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ControlPanel.Service1.TURNConfigurations)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WcfServiceClient : System.ServiceModel.DuplexClientBase<ControlPanel.Service1.IWcfService>, ControlPanel.Service1.IWcfService {
        
        private BeginOperationDelegate onBeginGetConfigurationsDelegate;
        
        private EndOperationDelegate onEndGetConfigurationsDelegate;
        
        private System.Threading.SendOrPostCallback onGetConfigurationsCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetConfigurationsDelegate;
        
        private EndOperationDelegate onEndSetConfigurationsDelegate;
        
        private System.Threading.SendOrPostCallback onSetConfigurationsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUsersCountDelegate;
        
        private EndOperationDelegate onEndGetUsersCountDelegate;
        
        private System.Threading.SendOrPostCallback onGetUsersCountCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUsersDelegate;
        
        private EndOperationDelegate onEndGetUsersDelegate;
        
        private System.Threading.SendOrPostCallback onGetUsersCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddUserDelegate;
        
        private EndOperationDelegate onEndAddUserDelegate;
        
        private System.Threading.SendOrPostCallback onAddUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateUserDelegate;
        
        private EndOperationDelegate onEndUpdateUserDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveUserDelegate;
        
        private EndOperationDelegate onEndRemoveUserDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetUserPasswordDelegate;
        
        private EndOperationDelegate onEndSetUserPasswordDelegate;
        
        private System.Threading.SendOrPostCallback onSetUserPasswordCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetVoipProvidersDelegate;
        
        private EndOperationDelegate onEndGetVoipProvidersDelegate;
        
        private System.Threading.SendOrPostCallback onGetVoipProvidersCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddVoipProviderDelegate;
        
        private EndOperationDelegate onEndAddVoipProviderDelegate;
        
        private System.Threading.SendOrPostCallback onAddVoipProviderCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveVoipProviderDelegate;
        
        private EndOperationDelegate onEndRemoveVoipProviderDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveVoipProviderCompletedDelegate;
        
        private BeginOperationDelegate onBeginPingDelegate;
        
        private EndOperationDelegate onEndPingDelegate;
        
        private System.Threading.SendOrPostCallback onPingCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetVersionDelegate;
        
        private EndOperationDelegate onEndGetVersionDelegate;
        
        private System.Threading.SendOrPostCallback onGetVersionCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDefaultXmlConfigurationDelegate;
        
        private EndOperationDelegate onEndGetDefaultXmlConfigurationDelegate;
        
        private System.Threading.SendOrPostCallback onGetDefaultXmlConfigurationCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetXmlConfigurationDelegate;
        
        private EndOperationDelegate onEndGetXmlConfigurationDelegate;
        
        private System.Threading.SendOrPostCallback onGetXmlConfigurationCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetXmlConfigurationDelegate;
        
        private EndOperationDelegate onEndSetXmlConfigurationDelegate;
        
        private System.Threading.SendOrPostCallback onSetXmlConfigurationCompletedDelegate;
        
        private BeginOperationDelegate onBeginValidateXmlConfigurationDelegate;
        
        private EndOperationDelegate onEndValidateXmlConfigurationDelegate;
        
        private System.Threading.SendOrPostCallback onValidateXmlConfigurationCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTurnConfigurationsDelegate;
        
        private EndOperationDelegate onEndGetTurnConfigurationsDelegate;
        
        private System.Threading.SendOrPostCallback onGetTurnConfigurationsCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetTurnConfigurationsDelegate;
        
        private EndOperationDelegate onEndSetTurnConfigurationsDelegate;
        
        private System.Threading.SendOrPostCallback onSetTurnConfigurationsCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetAdministratorPasswordDelegate;
        
        private EndOperationDelegate onEndSetAdministratorPasswordDelegate;
        
        private System.Threading.SendOrPostCallback onSetAdministratorPasswordCompletedDelegate;
        
        public WcfServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public WcfServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public WcfServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public WcfServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public WcfServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetConfigurationsCompletedEventArgs> GetConfigurationsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SetConfigurationsCompleted;
        
        public event System.EventHandler<GetUsersCountCompletedEventArgs> GetUsersCountCompleted;
        
        public event System.EventHandler<GetUsersCompletedEventArgs> GetUsersCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddUserCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateUserCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RemoveUserCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SetUserPasswordCompleted;
        
        public event System.EventHandler<GetVoipProvidersCompletedEventArgs> GetVoipProvidersCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddVoipProviderCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RemoveVoipProviderCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> PingCompleted;
        
        public event System.EventHandler<GetVersionCompletedEventArgs> GetVersionCompleted;
        
        public event System.EventHandler<GetDefaultXmlConfigurationCompletedEventArgs> GetDefaultXmlConfigurationCompleted;
        
        public event System.EventHandler<GetXmlConfigurationCompletedEventArgs> GetXmlConfigurationCompleted;
        
        public event System.EventHandler<SetXmlConfigurationCompletedEventArgs> SetXmlConfigurationCompleted;
        
        public event System.EventHandler<ValidateXmlConfigurationCompletedEventArgs> ValidateXmlConfigurationCompleted;
        
        public event System.EventHandler<GetTurnConfigurationsCompletedEventArgs> GetTurnConfigurationsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SetTurnConfigurationsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SetAdministratorPasswordCompleted;
        
        public ControlPanel.Service1.Configurations GetConfigurations() {
            return base.Channel.GetConfigurations();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetConfigurations(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetConfigurations(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ControlPanel.Service1.Configurations EndGetConfigurations(System.IAsyncResult result) {
            return base.Channel.EndGetConfigurations(result);
        }
        
        private System.IAsyncResult OnBeginGetConfigurations(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetConfigurations(callback, asyncState);
        }
        
        private object[] OnEndGetConfigurations(System.IAsyncResult result) {
            ControlPanel.Service1.Configurations retVal = this.EndGetConfigurations(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetConfigurationsCompleted(object state) {
            if ((this.GetConfigurationsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetConfigurationsCompleted(this, new GetConfigurationsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetConfigurationsAsync() {
            this.GetConfigurationsAsync(null);
        }
        
        public void GetConfigurationsAsync(object userState) {
            if ((this.onBeginGetConfigurationsDelegate == null)) {
                this.onBeginGetConfigurationsDelegate = new BeginOperationDelegate(this.OnBeginGetConfigurations);
            }
            if ((this.onEndGetConfigurationsDelegate == null)) {
                this.onEndGetConfigurationsDelegate = new EndOperationDelegate(this.OnEndGetConfigurations);
            }
            if ((this.onGetConfigurationsCompletedDelegate == null)) {
                this.onGetConfigurationsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetConfigurationsCompleted);
            }
            base.InvokeAsync(this.onBeginGetConfigurationsDelegate, null, this.onEndGetConfigurationsDelegate, this.onGetConfigurationsCompletedDelegate, userState);
        }
        
        public void SetConfigurations(ControlPanel.Service1.Configurations configurations) {
            base.Channel.SetConfigurations(configurations);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSetConfigurations(ControlPanel.Service1.Configurations configurations, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetConfigurations(configurations, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSetConfigurations(System.IAsyncResult result) {
            base.Channel.EndSetConfigurations(result);
        }
        
        private System.IAsyncResult OnBeginSetConfigurations(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ControlPanel.Service1.Configurations configurations = ((ControlPanel.Service1.Configurations)(inValues[0]));
            return this.BeginSetConfigurations(configurations, callback, asyncState);
        }
        
        private object[] OnEndSetConfigurations(System.IAsyncResult result) {
            this.EndSetConfigurations(result);
            return null;
        }
        
        private void OnSetConfigurationsCompleted(object state) {
            if ((this.SetConfigurationsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetConfigurationsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetConfigurationsAsync(ControlPanel.Service1.Configurations configurations) {
            this.SetConfigurationsAsync(configurations, null);
        }
        
        public void SetConfigurationsAsync(ControlPanel.Service1.Configurations configurations, object userState) {
            if ((this.onBeginSetConfigurationsDelegate == null)) {
                this.onBeginSetConfigurationsDelegate = new BeginOperationDelegate(this.OnBeginSetConfigurations);
            }
            if ((this.onEndSetConfigurationsDelegate == null)) {
                this.onEndSetConfigurationsDelegate = new EndOperationDelegate(this.OnEndSetConfigurations);
            }
            if ((this.onSetConfigurationsCompletedDelegate == null)) {
                this.onSetConfigurationsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetConfigurationsCompleted);
            }
            base.InvokeAsync(this.onBeginSetConfigurationsDelegate, new object[] {
                        configurations}, this.onEndSetConfigurationsDelegate, this.onSetConfigurationsCompletedDelegate, userState);
        }
        
        public int GetUsersCount(string id) {
            return base.Channel.GetUsersCount(id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetUsersCount(string id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUsersCount(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndGetUsersCount(System.IAsyncResult result) {
            return base.Channel.EndGetUsersCount(result);
        }
        
        private System.IAsyncResult OnBeginGetUsersCount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string id = ((string)(inValues[0]));
            return this.BeginGetUsersCount(id, callback, asyncState);
        }
        
        private object[] OnEndGetUsersCount(System.IAsyncResult result) {
            int retVal = this.EndGetUsersCount(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUsersCountCompleted(object state) {
            if ((this.GetUsersCountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUsersCountCompleted(this, new GetUsersCountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUsersCountAsync(string id) {
            this.GetUsersCountAsync(id, null);
        }
        
        public void GetUsersCountAsync(string id, object userState) {
            if ((this.onBeginGetUsersCountDelegate == null)) {
                this.onBeginGetUsersCountDelegate = new BeginOperationDelegate(this.OnBeginGetUsersCount);
            }
            if ((this.onEndGetUsersCountDelegate == null)) {
                this.onEndGetUsersCountDelegate = new EndOperationDelegate(this.OnEndGetUsersCount);
            }
            if ((this.onGetUsersCountCompletedDelegate == null)) {
                this.onGetUsersCountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUsersCountCompleted);
            }
            base.InvokeAsync(this.onBeginGetUsersCountDelegate, new object[] {
                        id}, this.onEndGetUsersCountDelegate, this.onGetUsersCountCompletedDelegate, userState);
        }
        
        public ControlPanel.Service1.User[] GetUsers(out int overallCount, string id, int startIndex, int count) {
            return base.Channel.GetUsers(out overallCount, id, startIndex, count);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetUsers(string id, int startIndex, int count, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUsers(id, startIndex, count, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ControlPanel.Service1.User[] EndGetUsers(out int overallCount, System.IAsyncResult result) {
            return base.Channel.EndGetUsers(out overallCount, result);
        }
        
        private System.IAsyncResult OnBeginGetUsers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string id = ((string)(inValues[0]));
            int startIndex = ((int)(inValues[1]));
            int count = ((int)(inValues[2]));
            return this.BeginGetUsers(id, startIndex, count, callback, asyncState);
        }
        
        private object[] OnEndGetUsers(System.IAsyncResult result) {
            int overallCount = this.GetDefaultValueForInitialization<int>();
            ControlPanel.Service1.User[] retVal = this.EndGetUsers(out overallCount, result);
            return new object[] {
                    overallCount,
                    retVal};
        }
        
        private void OnGetUsersCompleted(object state) {
            if ((this.GetUsersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUsersCompleted(this, new GetUsersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUsersAsync(string id, int startIndex, int count) {
            this.GetUsersAsync(id, startIndex, count, null);
        }
        
        public void GetUsersAsync(string id, int startIndex, int count, object userState) {
            if ((this.onBeginGetUsersDelegate == null)) {
                this.onBeginGetUsersDelegate = new BeginOperationDelegate(this.OnBeginGetUsers);
            }
            if ((this.onEndGetUsersDelegate == null)) {
                this.onEndGetUsersDelegate = new EndOperationDelegate(this.OnEndGetUsers);
            }
            if ((this.onGetUsersCompletedDelegate == null)) {
                this.onGetUsersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUsersCompleted);
            }
            base.InvokeAsync(this.onBeginGetUsersDelegate, new object[] {
                        id,
                        startIndex,
                        count}, this.onEndGetUsersDelegate, this.onGetUsersCompletedDelegate, userState);
        }
        
        public void AddUser(string usersId, ControlPanel.Service1.User user, string password) {
            base.Channel.AddUser(usersId, user, password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddUser(string usersId, ControlPanel.Service1.User user, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddUser(usersId, user, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAddUser(System.IAsyncResult result) {
            base.Channel.EndAddUser(result);
        }
        
        private System.IAsyncResult OnBeginAddUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string usersId = ((string)(inValues[0]));
            ControlPanel.Service1.User user = ((ControlPanel.Service1.User)(inValues[1]));
            string password = ((string)(inValues[2]));
            return this.BeginAddUser(usersId, user, password, callback, asyncState);
        }
        
        private object[] OnEndAddUser(System.IAsyncResult result) {
            this.EndAddUser(result);
            return null;
        }
        
        private void OnAddUserCompleted(object state) {
            if ((this.AddUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddUserAsync(string usersId, ControlPanel.Service1.User user, string password) {
            this.AddUserAsync(usersId, user, password, null);
        }
        
        public void AddUserAsync(string usersId, ControlPanel.Service1.User user, string password, object userState) {
            if ((this.onBeginAddUserDelegate == null)) {
                this.onBeginAddUserDelegate = new BeginOperationDelegate(this.OnBeginAddUser);
            }
            if ((this.onEndAddUserDelegate == null)) {
                this.onEndAddUserDelegate = new EndOperationDelegate(this.OnEndAddUser);
            }
            if ((this.onAddUserCompletedDelegate == null)) {
                this.onAddUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddUserCompleted);
            }
            base.InvokeAsync(this.onBeginAddUserDelegate, new object[] {
                        usersId,
                        user,
                        password}, this.onEndAddUserDelegate, this.onAddUserCompletedDelegate, userState);
        }
        
        public void UpdateUser(string usersId, ControlPanel.Service1.User user) {
            base.Channel.UpdateUser(usersId, user);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateUser(string usersId, ControlPanel.Service1.User user, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateUser(usersId, user, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateUser(System.IAsyncResult result) {
            base.Channel.EndUpdateUser(result);
        }
        
        private System.IAsyncResult OnBeginUpdateUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string usersId = ((string)(inValues[0]));
            ControlPanel.Service1.User user = ((ControlPanel.Service1.User)(inValues[1]));
            return this.BeginUpdateUser(usersId, user, callback, asyncState);
        }
        
        private object[] OnEndUpdateUser(System.IAsyncResult result) {
            this.EndUpdateUser(result);
            return null;
        }
        
        private void OnUpdateUserCompleted(object state) {
            if ((this.UpdateUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateUserAsync(string usersId, ControlPanel.Service1.User user) {
            this.UpdateUserAsync(usersId, user, null);
        }
        
        public void UpdateUserAsync(string usersId, ControlPanel.Service1.User user, object userState) {
            if ((this.onBeginUpdateUserDelegate == null)) {
                this.onBeginUpdateUserDelegate = new BeginOperationDelegate(this.OnBeginUpdateUser);
            }
            if ((this.onEndUpdateUserDelegate == null)) {
                this.onEndUpdateUserDelegate = new EndOperationDelegate(this.OnEndUpdateUser);
            }
            if ((this.onUpdateUserCompletedDelegate == null)) {
                this.onUpdateUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateUserCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateUserDelegate, new object[] {
                        usersId,
                        user}, this.onEndUpdateUserDelegate, this.onUpdateUserCompletedDelegate, userState);
        }
        
        public void RemoveUser(string usersId, string name) {
            base.Channel.RemoveUser(usersId, name);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRemoveUser(string usersId, string name, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveUser(usersId, name, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRemoveUser(System.IAsyncResult result) {
            base.Channel.EndRemoveUser(result);
        }
        
        private System.IAsyncResult OnBeginRemoveUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string usersId = ((string)(inValues[0]));
            string name = ((string)(inValues[1]));
            return this.BeginRemoveUser(usersId, name, callback, asyncState);
        }
        
        private object[] OnEndRemoveUser(System.IAsyncResult result) {
            this.EndRemoveUser(result);
            return null;
        }
        
        private void OnRemoveUserCompleted(object state) {
            if ((this.RemoveUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveUserAsync(string usersId, string name) {
            this.RemoveUserAsync(usersId, name, null);
        }
        
        public void RemoveUserAsync(string usersId, string name, object userState) {
            if ((this.onBeginRemoveUserDelegate == null)) {
                this.onBeginRemoveUserDelegate = new BeginOperationDelegate(this.OnBeginRemoveUser);
            }
            if ((this.onEndRemoveUserDelegate == null)) {
                this.onEndRemoveUserDelegate = new EndOperationDelegate(this.OnEndRemoveUser);
            }
            if ((this.onRemoveUserCompletedDelegate == null)) {
                this.onRemoveUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveUserCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveUserDelegate, new object[] {
                        usersId,
                        name}, this.onEndRemoveUserDelegate, this.onRemoveUserCompletedDelegate, userState);
        }
        
        public void SetUserPassword(string usersId, string name, string password) {
            base.Channel.SetUserPassword(usersId, name, password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSetUserPassword(string usersId, string name, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetUserPassword(usersId, name, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSetUserPassword(System.IAsyncResult result) {
            base.Channel.EndSetUserPassword(result);
        }
        
        private System.IAsyncResult OnBeginSetUserPassword(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string usersId = ((string)(inValues[0]));
            string name = ((string)(inValues[1]));
            string password = ((string)(inValues[2]));
            return this.BeginSetUserPassword(usersId, name, password, callback, asyncState);
        }
        
        private object[] OnEndSetUserPassword(System.IAsyncResult result) {
            this.EndSetUserPassword(result);
            return null;
        }
        
        private void OnSetUserPasswordCompleted(object state) {
            if ((this.SetUserPasswordCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetUserPasswordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetUserPasswordAsync(string usersId, string name, string password) {
            this.SetUserPasswordAsync(usersId, name, password, null);
        }
        
        public void SetUserPasswordAsync(string usersId, string name, string password, object userState) {
            if ((this.onBeginSetUserPasswordDelegate == null)) {
                this.onBeginSetUserPasswordDelegate = new BeginOperationDelegate(this.OnBeginSetUserPassword);
            }
            if ((this.onEndSetUserPasswordDelegate == null)) {
                this.onEndSetUserPasswordDelegate = new EndOperationDelegate(this.OnEndSetUserPassword);
            }
            if ((this.onSetUserPasswordCompletedDelegate == null)) {
                this.onSetUserPasswordCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetUserPasswordCompleted);
            }
            base.InvokeAsync(this.onBeginSetUserPasswordDelegate, new object[] {
                        usersId,
                        name,
                        password}, this.onEndSetUserPasswordDelegate, this.onSetUserPasswordCompletedDelegate, userState);
        }
        
        public ControlPanel.Service1.VoipProvider[] GetVoipProviders() {
            return base.Channel.GetVoipProviders();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetVoipProviders(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetVoipProviders(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ControlPanel.Service1.VoipProvider[] EndGetVoipProviders(System.IAsyncResult result) {
            return base.Channel.EndGetVoipProviders(result);
        }
        
        private System.IAsyncResult OnBeginGetVoipProviders(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetVoipProviders(callback, asyncState);
        }
        
        private object[] OnEndGetVoipProviders(System.IAsyncResult result) {
            ControlPanel.Service1.VoipProvider[] retVal = this.EndGetVoipProviders(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetVoipProvidersCompleted(object state) {
            if ((this.GetVoipProvidersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetVoipProvidersCompleted(this, new GetVoipProvidersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetVoipProvidersAsync() {
            this.GetVoipProvidersAsync(null);
        }
        
        public void GetVoipProvidersAsync(object userState) {
            if ((this.onBeginGetVoipProvidersDelegate == null)) {
                this.onBeginGetVoipProvidersDelegate = new BeginOperationDelegate(this.OnBeginGetVoipProviders);
            }
            if ((this.onEndGetVoipProvidersDelegate == null)) {
                this.onEndGetVoipProvidersDelegate = new EndOperationDelegate(this.OnEndGetVoipProviders);
            }
            if ((this.onGetVoipProvidersCompletedDelegate == null)) {
                this.onGetVoipProvidersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetVoipProvidersCompleted);
            }
            base.InvokeAsync(this.onBeginGetVoipProvidersDelegate, null, this.onEndGetVoipProvidersDelegate, this.onGetVoipProvidersCompletedDelegate, userState);
        }
        
        public void AddVoipProvider(ControlPanel.Service1.VoipProvider provider) {
            base.Channel.AddVoipProvider(provider);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddVoipProvider(ControlPanel.Service1.VoipProvider provider, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddVoipProvider(provider, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAddVoipProvider(System.IAsyncResult result) {
            base.Channel.EndAddVoipProvider(result);
        }
        
        private System.IAsyncResult OnBeginAddVoipProvider(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ControlPanel.Service1.VoipProvider provider = ((ControlPanel.Service1.VoipProvider)(inValues[0]));
            return this.BeginAddVoipProvider(provider, callback, asyncState);
        }
        
        private object[] OnEndAddVoipProvider(System.IAsyncResult result) {
            this.EndAddVoipProvider(result);
            return null;
        }
        
        private void OnAddVoipProviderCompleted(object state) {
            if ((this.AddVoipProviderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddVoipProviderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddVoipProviderAsync(ControlPanel.Service1.VoipProvider provider) {
            this.AddVoipProviderAsync(provider, null);
        }
        
        public void AddVoipProviderAsync(ControlPanel.Service1.VoipProvider provider, object userState) {
            if ((this.onBeginAddVoipProviderDelegate == null)) {
                this.onBeginAddVoipProviderDelegate = new BeginOperationDelegate(this.OnBeginAddVoipProvider);
            }
            if ((this.onEndAddVoipProviderDelegate == null)) {
                this.onEndAddVoipProviderDelegate = new EndOperationDelegate(this.OnEndAddVoipProvider);
            }
            if ((this.onAddVoipProviderCompletedDelegate == null)) {
                this.onAddVoipProviderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddVoipProviderCompleted);
            }
            base.InvokeAsync(this.onBeginAddVoipProviderDelegate, new object[] {
                        provider}, this.onEndAddVoipProviderDelegate, this.onAddVoipProviderCompletedDelegate, userState);
        }
        
        public void RemoveVoipProvider(string username, string hostname) {
            base.Channel.RemoveVoipProvider(username, hostname);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRemoveVoipProvider(string username, string hostname, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveVoipProvider(username, hostname, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRemoveVoipProvider(System.IAsyncResult result) {
            base.Channel.EndRemoveVoipProvider(result);
        }
        
        private System.IAsyncResult OnBeginRemoveVoipProvider(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            string hostname = ((string)(inValues[1]));
            return this.BeginRemoveVoipProvider(username, hostname, callback, asyncState);
        }
        
        private object[] OnEndRemoveVoipProvider(System.IAsyncResult result) {
            this.EndRemoveVoipProvider(result);
            return null;
        }
        
        private void OnRemoveVoipProviderCompleted(object state) {
            if ((this.RemoveVoipProviderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveVoipProviderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveVoipProviderAsync(string username, string hostname) {
            this.RemoveVoipProviderAsync(username, hostname, null);
        }
        
        public void RemoveVoipProviderAsync(string username, string hostname, object userState) {
            if ((this.onBeginRemoveVoipProviderDelegate == null)) {
                this.onBeginRemoveVoipProviderDelegate = new BeginOperationDelegate(this.OnBeginRemoveVoipProvider);
            }
            if ((this.onEndRemoveVoipProviderDelegate == null)) {
                this.onEndRemoveVoipProviderDelegate = new EndOperationDelegate(this.OnEndRemoveVoipProvider);
            }
            if ((this.onRemoveVoipProviderCompletedDelegate == null)) {
                this.onRemoveVoipProviderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveVoipProviderCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveVoipProviderDelegate, new object[] {
                        username,
                        hostname}, this.onEndRemoveVoipProviderDelegate, this.onRemoveVoipProviderCompletedDelegate, userState);
        }
        
        public void Ping() {
            base.Channel.Ping();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPing(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPing(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndPing(System.IAsyncResult result) {
            base.Channel.EndPing(result);
        }
        
        private System.IAsyncResult OnBeginPing(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginPing(callback, asyncState);
        }
        
        private object[] OnEndPing(System.IAsyncResult result) {
            this.EndPing(result);
            return null;
        }
        
        private void OnPingCompleted(object state) {
            if ((this.PingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PingAsync() {
            this.PingAsync(null);
        }
        
        public void PingAsync(object userState) {
            if ((this.onBeginPingDelegate == null)) {
                this.onBeginPingDelegate = new BeginOperationDelegate(this.OnBeginPing);
            }
            if ((this.onEndPingDelegate == null)) {
                this.onEndPingDelegate = new EndOperationDelegate(this.OnEndPing);
            }
            if ((this.onPingCompletedDelegate == null)) {
                this.onPingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPingCompleted);
            }
            base.InvokeAsync(this.onBeginPingDelegate, null, this.onEndPingDelegate, this.onPingCompletedDelegate, userState);
        }
        
        public System.Version GetVersion() {
            return base.Channel.GetVersion();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetVersion(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetVersion(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Version EndGetVersion(System.IAsyncResult result) {
            return base.Channel.EndGetVersion(result);
        }
        
        private System.IAsyncResult OnBeginGetVersion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetVersion(callback, asyncState);
        }
        
        private object[] OnEndGetVersion(System.IAsyncResult result) {
            System.Version retVal = this.EndGetVersion(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetVersionCompleted(object state) {
            if ((this.GetVersionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetVersionCompleted(this, new GetVersionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetVersionAsync() {
            this.GetVersionAsync(null);
        }
        
        public void GetVersionAsync(object userState) {
            if ((this.onBeginGetVersionDelegate == null)) {
                this.onBeginGetVersionDelegate = new BeginOperationDelegate(this.OnBeginGetVersion);
            }
            if ((this.onEndGetVersionDelegate == null)) {
                this.onEndGetVersionDelegate = new EndOperationDelegate(this.OnEndGetVersion);
            }
            if ((this.onGetVersionCompletedDelegate == null)) {
                this.onGetVersionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetVersionCompleted);
            }
            base.InvokeAsync(this.onBeginGetVersionDelegate, null, this.onEndGetVersionDelegate, this.onGetVersionCompletedDelegate, userState);
        }
        
        public string GetDefaultXmlConfiguration() {
            return base.Channel.GetDefaultXmlConfiguration();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetDefaultXmlConfiguration(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDefaultXmlConfiguration(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetDefaultXmlConfiguration(System.IAsyncResult result) {
            return base.Channel.EndGetDefaultXmlConfiguration(result);
        }
        
        private System.IAsyncResult OnBeginGetDefaultXmlConfiguration(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetDefaultXmlConfiguration(callback, asyncState);
        }
        
        private object[] OnEndGetDefaultXmlConfiguration(System.IAsyncResult result) {
            string retVal = this.EndGetDefaultXmlConfiguration(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDefaultXmlConfigurationCompleted(object state) {
            if ((this.GetDefaultXmlConfigurationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDefaultXmlConfigurationCompleted(this, new GetDefaultXmlConfigurationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDefaultXmlConfigurationAsync() {
            this.GetDefaultXmlConfigurationAsync(null);
        }
        
        public void GetDefaultXmlConfigurationAsync(object userState) {
            if ((this.onBeginGetDefaultXmlConfigurationDelegate == null)) {
                this.onBeginGetDefaultXmlConfigurationDelegate = new BeginOperationDelegate(this.OnBeginGetDefaultXmlConfiguration);
            }
            if ((this.onEndGetDefaultXmlConfigurationDelegate == null)) {
                this.onEndGetDefaultXmlConfigurationDelegate = new EndOperationDelegate(this.OnEndGetDefaultXmlConfiguration);
            }
            if ((this.onGetDefaultXmlConfigurationCompletedDelegate == null)) {
                this.onGetDefaultXmlConfigurationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDefaultXmlConfigurationCompleted);
            }
            base.InvokeAsync(this.onBeginGetDefaultXmlConfigurationDelegate, null, this.onEndGetDefaultXmlConfigurationDelegate, this.onGetDefaultXmlConfigurationCompletedDelegate, userState);
        }
        
        public string GetXmlConfiguration() {
            return base.Channel.GetXmlConfiguration();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetXmlConfiguration(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetXmlConfiguration(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetXmlConfiguration(System.IAsyncResult result) {
            return base.Channel.EndGetXmlConfiguration(result);
        }
        
        private System.IAsyncResult OnBeginGetXmlConfiguration(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetXmlConfiguration(callback, asyncState);
        }
        
        private object[] OnEndGetXmlConfiguration(System.IAsyncResult result) {
            string retVal = this.EndGetXmlConfiguration(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetXmlConfigurationCompleted(object state) {
            if ((this.GetXmlConfigurationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetXmlConfigurationCompleted(this, new GetXmlConfigurationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetXmlConfigurationAsync() {
            this.GetXmlConfigurationAsync(null);
        }
        
        public void GetXmlConfigurationAsync(object userState) {
            if ((this.onBeginGetXmlConfigurationDelegate == null)) {
                this.onBeginGetXmlConfigurationDelegate = new BeginOperationDelegate(this.OnBeginGetXmlConfiguration);
            }
            if ((this.onEndGetXmlConfigurationDelegate == null)) {
                this.onEndGetXmlConfigurationDelegate = new EndOperationDelegate(this.OnEndGetXmlConfiguration);
            }
            if ((this.onGetXmlConfigurationCompletedDelegate == null)) {
                this.onGetXmlConfigurationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetXmlConfigurationCompleted);
            }
            base.InvokeAsync(this.onBeginGetXmlConfigurationDelegate, null, this.onEndGetXmlConfigurationDelegate, this.onGetXmlConfigurationCompletedDelegate, userState);
        }
        
        public string[] SetXmlConfiguration(string xml) {
            return base.Channel.SetXmlConfiguration(xml);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSetXmlConfiguration(string xml, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetXmlConfiguration(xml, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string[] EndSetXmlConfiguration(System.IAsyncResult result) {
            return base.Channel.EndSetXmlConfiguration(result);
        }
        
        private System.IAsyncResult OnBeginSetXmlConfiguration(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string xml = ((string)(inValues[0]));
            return this.BeginSetXmlConfiguration(xml, callback, asyncState);
        }
        
        private object[] OnEndSetXmlConfiguration(System.IAsyncResult result) {
            string[] retVal = this.EndSetXmlConfiguration(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSetXmlConfigurationCompleted(object state) {
            if ((this.SetXmlConfigurationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetXmlConfigurationCompleted(this, new SetXmlConfigurationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetXmlConfigurationAsync(string xml) {
            this.SetXmlConfigurationAsync(xml, null);
        }
        
        public void SetXmlConfigurationAsync(string xml, object userState) {
            if ((this.onBeginSetXmlConfigurationDelegate == null)) {
                this.onBeginSetXmlConfigurationDelegate = new BeginOperationDelegate(this.OnBeginSetXmlConfiguration);
            }
            if ((this.onEndSetXmlConfigurationDelegate == null)) {
                this.onEndSetXmlConfigurationDelegate = new EndOperationDelegate(this.OnEndSetXmlConfiguration);
            }
            if ((this.onSetXmlConfigurationCompletedDelegate == null)) {
                this.onSetXmlConfigurationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetXmlConfigurationCompleted);
            }
            base.InvokeAsync(this.onBeginSetXmlConfigurationDelegate, new object[] {
                        xml}, this.onEndSetXmlConfigurationDelegate, this.onSetXmlConfigurationCompletedDelegate, userState);
        }
        
        public string[] ValidateXmlConfiguration(string xml) {
            return base.Channel.ValidateXmlConfiguration(xml);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginValidateXmlConfiguration(string xml, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginValidateXmlConfiguration(xml, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string[] EndValidateXmlConfiguration(System.IAsyncResult result) {
            return base.Channel.EndValidateXmlConfiguration(result);
        }
        
        private System.IAsyncResult OnBeginValidateXmlConfiguration(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string xml = ((string)(inValues[0]));
            return this.BeginValidateXmlConfiguration(xml, callback, asyncState);
        }
        
        private object[] OnEndValidateXmlConfiguration(System.IAsyncResult result) {
            string[] retVal = this.EndValidateXmlConfiguration(result);
            return new object[] {
                    retVal};
        }
        
        private void OnValidateXmlConfigurationCompleted(object state) {
            if ((this.ValidateXmlConfigurationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ValidateXmlConfigurationCompleted(this, new ValidateXmlConfigurationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ValidateXmlConfigurationAsync(string xml) {
            this.ValidateXmlConfigurationAsync(xml, null);
        }
        
        public void ValidateXmlConfigurationAsync(string xml, object userState) {
            if ((this.onBeginValidateXmlConfigurationDelegate == null)) {
                this.onBeginValidateXmlConfigurationDelegate = new BeginOperationDelegate(this.OnBeginValidateXmlConfiguration);
            }
            if ((this.onEndValidateXmlConfigurationDelegate == null)) {
                this.onEndValidateXmlConfigurationDelegate = new EndOperationDelegate(this.OnEndValidateXmlConfiguration);
            }
            if ((this.onValidateXmlConfigurationCompletedDelegate == null)) {
                this.onValidateXmlConfigurationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnValidateXmlConfigurationCompleted);
            }
            base.InvokeAsync(this.onBeginValidateXmlConfigurationDelegate, new object[] {
                        xml}, this.onEndValidateXmlConfigurationDelegate, this.onValidateXmlConfigurationCompletedDelegate, userState);
        }
        
        public ControlPanel.Service1.TURNConfigurations GetTurnConfigurations() {
            return base.Channel.GetTurnConfigurations();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTurnConfigurations(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTurnConfigurations(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ControlPanel.Service1.TURNConfigurations EndGetTurnConfigurations(System.IAsyncResult result) {
            return base.Channel.EndGetTurnConfigurations(result);
        }
        
        private System.IAsyncResult OnBeginGetTurnConfigurations(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetTurnConfigurations(callback, asyncState);
        }
        
        private object[] OnEndGetTurnConfigurations(System.IAsyncResult result) {
            ControlPanel.Service1.TURNConfigurations retVal = this.EndGetTurnConfigurations(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTurnConfigurationsCompleted(object state) {
            if ((this.GetTurnConfigurationsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTurnConfigurationsCompleted(this, new GetTurnConfigurationsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTurnConfigurationsAsync() {
            this.GetTurnConfigurationsAsync(null);
        }
        
        public void GetTurnConfigurationsAsync(object userState) {
            if ((this.onBeginGetTurnConfigurationsDelegate == null)) {
                this.onBeginGetTurnConfigurationsDelegate = new BeginOperationDelegate(this.OnBeginGetTurnConfigurations);
            }
            if ((this.onEndGetTurnConfigurationsDelegate == null)) {
                this.onEndGetTurnConfigurationsDelegate = new EndOperationDelegate(this.OnEndGetTurnConfigurations);
            }
            if ((this.onGetTurnConfigurationsCompletedDelegate == null)) {
                this.onGetTurnConfigurationsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTurnConfigurationsCompleted);
            }
            base.InvokeAsync(this.onBeginGetTurnConfigurationsDelegate, null, this.onEndGetTurnConfigurationsDelegate, this.onGetTurnConfigurationsCompletedDelegate, userState);
        }
        
        public void SetTurnConfigurations(ControlPanel.Service1.TURNConfigurations configurations) {
            base.Channel.SetTurnConfigurations(configurations);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSetTurnConfigurations(ControlPanel.Service1.TURNConfigurations configurations, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetTurnConfigurations(configurations, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSetTurnConfigurations(System.IAsyncResult result) {
            base.Channel.EndSetTurnConfigurations(result);
        }
        
        private System.IAsyncResult OnBeginSetTurnConfigurations(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ControlPanel.Service1.TURNConfigurations configurations = ((ControlPanel.Service1.TURNConfigurations)(inValues[0]));
            return this.BeginSetTurnConfigurations(configurations, callback, asyncState);
        }
        
        private object[] OnEndSetTurnConfigurations(System.IAsyncResult result) {
            this.EndSetTurnConfigurations(result);
            return null;
        }
        
        private void OnSetTurnConfigurationsCompleted(object state) {
            if ((this.SetTurnConfigurationsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetTurnConfigurationsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetTurnConfigurationsAsync(ControlPanel.Service1.TURNConfigurations configurations) {
            this.SetTurnConfigurationsAsync(configurations, null);
        }
        
        public void SetTurnConfigurationsAsync(ControlPanel.Service1.TURNConfigurations configurations, object userState) {
            if ((this.onBeginSetTurnConfigurationsDelegate == null)) {
                this.onBeginSetTurnConfigurationsDelegate = new BeginOperationDelegate(this.OnBeginSetTurnConfigurations);
            }
            if ((this.onEndSetTurnConfigurationsDelegate == null)) {
                this.onEndSetTurnConfigurationsDelegate = new EndOperationDelegate(this.OnEndSetTurnConfigurations);
            }
            if ((this.onSetTurnConfigurationsCompletedDelegate == null)) {
                this.onSetTurnConfigurationsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetTurnConfigurationsCompleted);
            }
            base.InvokeAsync(this.onBeginSetTurnConfigurationsDelegate, new object[] {
                        configurations}, this.onEndSetTurnConfigurationsDelegate, this.onSetTurnConfigurationsCompletedDelegate, userState);
        }
        
        public void SetAdministratorPassword(string newPassword) {
            base.Channel.SetAdministratorPassword(newPassword);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSetAdministratorPassword(string newPassword, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetAdministratorPassword(newPassword, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSetAdministratorPassword(System.IAsyncResult result) {
            base.Channel.EndSetAdministratorPassword(result);
        }
        
        private System.IAsyncResult OnBeginSetAdministratorPassword(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string newPassword = ((string)(inValues[0]));
            return this.BeginSetAdministratorPassword(newPassword, callback, asyncState);
        }
        
        private object[] OnEndSetAdministratorPassword(System.IAsyncResult result) {
            this.EndSetAdministratorPassword(result);
            return null;
        }
        
        private void OnSetAdministratorPasswordCompleted(object state) {
            if ((this.SetAdministratorPasswordCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetAdministratorPasswordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetAdministratorPasswordAsync(string newPassword) {
            this.SetAdministratorPasswordAsync(newPassword, null);
        }
        
        public void SetAdministratorPasswordAsync(string newPassword, object userState) {
            if ((this.onBeginSetAdministratorPasswordDelegate == null)) {
                this.onBeginSetAdministratorPasswordDelegate = new BeginOperationDelegate(this.OnBeginSetAdministratorPassword);
            }
            if ((this.onEndSetAdministratorPasswordDelegate == null)) {
                this.onEndSetAdministratorPasswordDelegate = new EndOperationDelegate(this.OnEndSetAdministratorPassword);
            }
            if ((this.onSetAdministratorPasswordCompletedDelegate == null)) {
                this.onSetAdministratorPasswordCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetAdministratorPasswordCompleted);
            }
            base.InvokeAsync(this.onBeginSetAdministratorPasswordDelegate, new object[] {
                        newPassword}, this.onEndSetAdministratorPasswordDelegate, this.onSetAdministratorPasswordCompletedDelegate, userState);
        }
    }
}
